{
	"Unity MonoBehaviour": {
		"prefix": "umonobehaviour",
		"body": [
			"using System.Collections;",
			"using System.Collections.Generic;",
			"using UnityEngine;",
			"",
			"namespace Fiftytwo",
			"{",
			"\tpublic class ${TM_FILENAME/(.*)\\..+$/$1/} : MonoBehaviour",
			"\t{",
			"\t\tprivate void Awake ()",
			"\t\t{",
			"\t\t\t$0",
			"\t\t}",
			"\t}",
			"}",
			"",
		]
	},
	"Unity ScriptableObject": {
		"prefix": "uscriptableobject",
		"body": [
			"using System.Collections;",
			"using System.Collections.Generic;",
			"using UnityEngine;",
			"",
			"namespace Fiftytwo",
			"{",
			"\tpublic class ${TM_FILENAME/(.*)\\..+$/$1/} : ScriptableObject",
			"\t{",
			"\t\tprivate void OnEnable ()",
			"\t\t{",
			"\t\t\t$0",
			"\t\t}",
			"\t}",
			"}",
			"",
		]
	},
	"Unity3D Property Drawer": {
		"prefix": "upropertydrawer",
		"body": [
			"using System.Collections;",
			"using System.Collections.Generic;",
			"using UnityEngine;",
			"using UnityEditor;",
			"",
			"namespace Fiftytwo",
			"{",
			"\t[CustomPropertyDrawer( typeof( ${TM_FILENAME/(.*)Drawer\\..+$/$1/} ) )]",
			"\tpublic class ${TM_FILENAME/(.*)\\..+$/$1/} : PropertyDrawer",
			"\t{",
			"\t\tpublic override void OnGUI ( Rect position, SerializedProperty property, GUIContent label )",
			"\t\t{",
			"\t\t\tlabel = EditorGUI.BeginProperty( position, label, property );",
			"",
			"\t\t\tvar oldIndentLevel = EditorGUI.indentLevel;",
			"",
			"\t\t\tvar indentPosition = EditorGUI.IndentedRect( position );",
			"\t\t\tvar indent = indentPosition.x - position.x;",
			"\t\t\tvar rc = new Rect( indentPosition.x, indentPosition.y,",
			"\t\t\t\tEditorGUIUtility.labelWidth - indent, EditorGUIUtility.singleLineHeight );",
			"",
			"\t\t\tEditorGUI.PropertyField( position, property, label, true );",
			"",
			"\t\t\tEditorGUI.indentLevel = oldIndentLevel;",
			"",
			"\t\t\tEditorGUI.EndProperty();",
			"\t\t}",
			"",
			"\t\tpublic override float GetPropertyHeight ( SerializedProperty property, GUIContent label )",
			"\t\t{",
			"\t\t\treturn EditorGUI.GetPropertyHeight( property, label, true );",
			"\t\t}",
			"\t}",
			"}",
			""
		]
	},
	"Unity3D Custom Editor": {
		"prefix": "ueditor",
		"body": [
			"using System.Collections;",
			"using System.Collections.Generic;",
			"using UnityEngine;",
			"using UnityEditor;",
			"",
			"namespace Fiftytwo",
			"{",
			"\t[CanEditMultipleObjects]",
			"\t[CustomEditor( typeof( ${TM_FILENAME/(.*)Editor\\..+$/$1/} ) )]",
			"\tpublic class ${TM_FILENAME/(.*)\\..+$/$1/} : Editor",
			"\t{",
			"\t\tprivate ${TM_FILENAME/(.*)Editor\\..+$/$1/} _target;",
			"\t\t//private SerializedProperty _someSerializableField;",
			"",
			"\t\tprivate void OnEnable ()",
			"\t\t{",
			"\t\t\t_target = ( ${TM_FILENAME/(.*)Editor\\..+$/$1/} )target;",
			"\t\t\t//_someSerializableField = serializedObject.FindProperty( \"_someSerializableField\" );",
			"\t\t}",
			"",
			"\t\tpublic override void OnInspectorGUI ()",
			"\t\t{",
			"\t\t\t//serializedObject.Update();",
			"\t\t\t//EditorGUI.BeginChangeCheck();",
			"",
			"\t\t\t$0DrawDefaultInspector();",
			"",
			"\t\t\t//if( EditorGUI.EndChangeCheck() )",
			"\t\t\t\t//serializedObject.ApplyModifiedProperties();",
			"\t\t}",
			"\t}",
			"}",
			""
		]
	},
	"Unity3D Editor Window": {
		"prefix": "uwindow",
		"body": [
			"using System.Collections;",
			"using System.Collections.Generic;",
			"using UnityEngine;",
			"using UnityEditor;",
			"",
			"namespace Fiftytwo",
			"{",
			"\tpublic class ${TM_FILENAME/(.*)\\..+$/$1/} : EditorWindow",
			"\t{",
			"\t\t[MenuItem( \"Window/Fiftytwo/${TM_FILENAME/(.*)\\..+$/$1/}\" )]",
			"\t\tprivate static void ShowWindowMenuItem ()",
			"\t\t{",
			"\t\t\tvar window = GetWindow<${TM_FILENAME/(.*)\\..+$/$1/}>( false );",
			"\t\t\twindow.Show();",
			"\t\t}",
			"",
			"\t\tprivate void OnEnable ()",
			"\t\t{",
			"\t\t\ttitleContent = new GUIContent( \"${TM_FILENAME/(.*)\\..+$/$1/}\" );",
			"\t\t}",
			"",
			"\t\tprivate void OnDisable ()",
			"\t\t{",
			"\t\t}",
			"",
			"\t\tprivate void OnGUI ()",
			"\t\t{",
			"\t\t\t$0GUILayout.Label( \"${TM_FILENAME/(.*)\\..+$/$1/}\" );",
			"\t\t}",
			"\t}",
			"}",
			""
		]
	},
	"Unity3D Scenes Loop": {
		"prefix": "uscenesloop",
		"body": [
			"for( int i = 0, count = SceneManager.sceneCount; i < count; ++i )",
			"{",
			"\tvar scene = SceneManager.GetSceneAt( i );",
			"\tif( !scene.IsValid() )",
			"\t\tcontinue;",
			"}"
		]
	},
	"Unity3D Root Game Objects Loop": {
		"prefix": "urootgosloop",
		"body": [
			"List<GameObject> rootGOs = new List<GameObject>();",
			"for( int sceneIdx = 0, sceneCount = SceneManager.sceneCount; sceneIdx < sceneCount; ++sceneIdx )",
			"{",
			"\tvar scene = SceneManager.GetSceneAt( sceneIdx );",
			"\tif( !scene.IsValid() )",
			"\t\tcontinue;",
			"",
			"\tscene.GetRootGameObjects( rootGOs );",
			"\tfor( int goIdx = 0, gosCount = rootGOs.Count; goIdx < gosCount; ++goIdx )",
			"\t{",
			"\t\t$0",
			"\t}",
			"}"
		]
	},
	"Unity3D Process Transform Recursive": {
		"prefix": "utransformrecursive",
		"body": [
			"public static void ${1:MethodName}Recursive ( Transform t )",
			"{",
			"\t$0",
			"",
			"\tfor( int childIdx = 0, childCount = t.childCount; childIdx < childCount; ++childIdx )",
			"\t{",
			"\t\tvar child = t.GetChild( childIdx );",
			"\t\t${1:MethodName}Recursive( child );",
			"\t}",
			"}"
		]
	}
}
